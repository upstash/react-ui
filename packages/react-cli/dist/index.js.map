{"version":3,"sources":["../src/index.ts","../src/redis-cli.tsx"],"sourcesContent":["export * from \"./redis-cli\";\n","import { spawn } from \"child_process\";\nimport React, { PropsWithChildren, ReactNode, useEffect, useRef, useState } from \"react\";\nimport \"./tailwind.css\";\nexport type CliProps = {\n  url: string;\n  token: string;\n};\ntype Command = {\n  time: number;\n  command: string;\n  result?: string | null | number | boolean | string[] | React.ReactNode;\n  error?: boolean;\n};\n\nexport const RedisCli: React.FC<CliProps> = (props) => {\n  /**\n   * Holds a unique set of command inputs\n   */\n  const [history, setHistory] = useState<string[]>([]);\n\n  /**\n   * Used to cycle through the history with the up and down arrow keys\n   */\n  const [historyIndex, setHistoryIndex] = useState<number | null>(null);\n\n  /**\n   * Holds all commands that have been executed and their results\n   */\n  const [commands, setCommands] = useState<Command[]>([]);\n\n  /**\n   * Adds a command to the\n   */\n  function addCommand(command: Command) {\n    setHistory((prev) => {\n      if (prev.length === 0 || prev[0] !== command.command) {\n        return [command.command, ...prev];\n      }\n      return prev;\n    });\n    setCommands((prev) => [...prev, command]);\n  }\n  /**\n   * Used to show a loading indicator when querying redis\n   */\n  const [loading, setLoading] = useState(false);\n\n  /**\n   * stdin is the input that the user types in the cli\n   */\n  const [stdin, setStdin] = useState(\"\");\n\n  const specialCommands: Record<string, () => void> = {\n    clear: () => {\n      setCommands([]);\n      setHistoryIndex(null);\n      setStdin(\"\");\n    },\n    help: () => {\n      addCommand({\n        time: Date.now(),\n        command: \"help\",\n        result: (\n          <div>\n            <p>You can execute Redis commands in the terminal:</p>\n            <a\n              className=\"text-[#00e9a3] hover:underline\"\n              href=\"https://upstash.com/redis-api-compatibility\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              https://upstash.com/redis-api-compatibility\n            </a>\n            <br />\n            <div className=\"flex flex-col items-start p-2 mt-2 border\">\n              <span>Try</span>\n              <button onClick={() => setStdin(\"GET key\")}>\n                <pre>&gt; GET key</pre>\n              </button>\n              <button onClick={() => setStdin(\"LPUSH list e1 e2\")}>\n                <pre>&gt; LPUSH list e1 e2</pre>\n              </button>\n            </div>\n\n            <div className=\"flex flex-col items-start p-2 mt-2 border\">\n              <span>Special commands</span>\n              <button onClick={() => setStdin(\"clear\")}>\n                <pre>&gt; clear</pre>\n              </button>\n              <button onClick={() => setStdin(\"help\")}>\n                <pre>&gt; help</pre>\n              </button>\n            </div>\n          </div>\n        ),\n      });\n    },\n  };\n\n  /**\n   * When the user cycles through the history with the up and down arrow keys,\n   * the input should be updated to the command that they are currently on\n   */\n  useEffect(() => {\n    if (historyIndex === null) return;\n    const cmd = history[historyIndex];\n    if (!cmd) return;\n    setStdin(cmd);\n  }, [historyIndex, history]);\n\n  const ref = useRef<HTMLTextAreaElement>(null);\n\n  /**\n   * Automatically update the height of the textarea to fit the content\n   * Without this, the textarea would only be 1 line tall and the user would have to scroll\n   */\n  const [height, setHeight] = useState(\"100%\");\n  useEffect(() => {\n    setHeight(`${ref.current?.scrollHeight ?? 0}px`);\n  }, [ref, stdin]);\n\n  /**\n   * When the user presses enter, we first check if the command is a special command\n   * (e.g. clear, help). If it is, we execute the special command. Otherwise, we\n   * send the command to redis and display the result.\n   */\n  const onEnter = async () => {\n    try {\n      if (loading) return;\n      setLoading(true);\n\n      const command = stdin.trim();\n      if (!command) {\n        addCommand({ command, result: \"\", time: Date.now() });\n        return;\n      }\n      if (specialCommands[command]) {\n        specialCommands[command]();\n        return;\n      }\n\n      await new Promise((r) => setTimeout(r, 1000));\n\n      const args = splitArgs(command);\n\n      const res = await fetch(props.url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${props.token}`,\n        },\n        body: JSON.stringify(args),\n      });\n      const json = (await res.json()) as { result?: string; error?: string };\n      addCommand({ command, result: json.error ?? json.result, error: !!json.error, time: Date.now() });\n    } catch (e) {\n      const err = e as Error;\n      console.error(err.message);\n    } finally {\n      setHistoryIndex(null);\n      setLoading(false);\n      setStdin(\"\");\n    }\n  };\n\n  return (\n    <div\n      className=\"relative flex flex-col w-full h-full p-4 font-mono text-gray-200 bg-black\"\n      onMouseUp={() => {\n        /**\n         * The behaviour should be:\n         * 1. If the user clicks anywhere on the cli, the input should be focused\n         * 2. If the user selects some text, the input should not be focused because the user is\n         *    probably trying to copy some text\n         */\n        if (window?.getSelection()?.type !== \"Range\") {\n          ref.current?.focus();\n        }\n      }}\n    >\n      <div className=\"flex flex-col flex-grow h-full overflow-y-scroll break-all\">\n        <span className=\"text-[#00e9a3]\">Welcome to Upstash CLI</span>\n        {commands.map((r) => (\n          <Result key={r.time} command={r} />\n        ))}\n        <div>\n          <Line className={loading ? \"animate-pulse\" : \"\"} prefix={<span>➜</span>}>\n            <textarea\n              spellCheck={false}\n              key=\"stdin\"\n              style={{\n                resize: \"none\",\n                height,\n              }}\n              ref={ref}\n              // rows={Math.max(stdin.split(\"\\n\").length, Math.ceil(stdin.length / 80), 1)}\n              value={stdin}\n              onChange={(e) => setStdin(e.currentTarget.value)}\n              onKeyDown={async (e) => {\n                if (e.ctrlKey && e.key === \"c\") {\n                  e.preventDefault();\n                  addCommand({ command: `${stdin}^C`, time: Date.now() });\n                  setStdin(\"\");\n                  return;\n                }\n\n                if (e.key === \"Enter\" && !e.shiftKey) {\n                  e.preventDefault();\n                  await onEnter();\n                  return;\n                }\n                if (e.key === \"ArrowUp\") {\n                  if (history.length === 0) {\n                    setHistoryIndex(null);\n                    return;\n                  }\n                  setHistoryIndex(Math.min(history.length - 1, historyIndex === null ? 0 : historyIndex + 1));\n                  return;\n                }\n                if (e.key === \"ArrowDown\") {\n                  if (history.length === 0) {\n                    setHistoryIndex(null);\n                    return;\n                  }\n                  setHistoryIndex(Math.max(0, historyIndex === null ? history.length - 1 : historyIndex - 1));\n                  return;\n                }\n              }}\n              className=\"w-full h-full break-all placeholder-gray-600 bg-transparent border-none outline-none caret-[#00e9a3] focus:outline-none\"\n            />\n          </Line>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Line: React.FC<PropsWithChildren<{ prefix?: React.ReactNode; className?: string }>> = ({\n  className,\n  prefix,\n  children,\n}) => (\n  <div className={`relative flex items-center my-2 w-full ${className}`}>\n    <div className=\"absolute inset-y-0 w-4\">{prefix ?? <span> </span>}</div>\n    <div className=\"flex flex-col items-start w-full ml-4\">{children}</div>\n  </div>\n);\n/**\n *  splitArgs splits the command into an array of arguments by spaces\n * it handles single and double quotes correctly\n */\nfunction splitArgs(input: string): string[] {\n  const separator = /\\s/g;\n  let singleQuoteOpen = false;\n  let doubleQuoteOpen = false;\n  let tokenBuffer = [];\n  const ret = [];\n\n  const arr = input.split(\"\");\n  for (var i = 0; i < arr.length; ++i) {\n    var element = arr[i];\n    var matches = element.match(separator);\n    if (element === \"'\" && !doubleQuoteOpen) {\n      singleQuoteOpen = !singleQuoteOpen;\n      continue;\n    } else if (element === '\"' && !singleQuoteOpen) {\n      doubleQuoteOpen = !doubleQuoteOpen;\n      continue;\n    }\n\n    if (!(singleQuoteOpen || doubleQuoteOpen) && matches) {\n      if (tokenBuffer.length > 0) {\n        ret.push(tokenBuffer.join(\"\"));\n        tokenBuffer = [];\n      } else {\n        ret.push(element);\n      }\n    } else {\n      tokenBuffer.push(element);\n    }\n  }\n  if (tokenBuffer.length > 0) {\n    ret.push(tokenBuffer.join(\"\"));\n  } else {\n    ret.push(\"\");\n  }\n  return ret;\n}\n\nconst Result: React.FC<{ command: Command }> = ({ command }) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    ref.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [ref]);\n\n  return (\n    <div ref={ref} className=\"mb-2\">\n      <Line prefix={command.error ? <span className=\"text-red-500\">✗</span> : <span>➜</span>}>\n        <span>{command.command}</span>\n      </Line>\n      {typeof command.result !== \"undefined\" ? (\n        <Line>\n          <span className={command.error ? \"text-red-500\" : \"\"}>{formatResult(command.result)}</span>\n        </Line>\n      ) : null}\n    </div>\n  );\n};\n\nfunction formatResult(result: Command[\"result\"]): string | ReactNode {\n  console.log({ result });\n\n  switch (typeof result) {\n    case \"undefined\":\n      return \"\";\n    case \"boolean\":\n    case \"number\":\n      return result.toString();\n    case \"object\":\n      if (result === null) {\n        return \"nil\";\n      }\n      if (Array.isArray(result)) {\n        return result.map(formatResult).join(\", \");\n      }\n\n    default:\n      return result;\n  }\n}\n"],"mappings":"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","names":[]}